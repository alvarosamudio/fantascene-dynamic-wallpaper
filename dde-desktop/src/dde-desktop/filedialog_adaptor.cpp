/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -i filedialog_adaptor.h -l DBusFileDialogHandle -a :filedialog_adaptor.cpp dbus/filedialog/com.deepin.filemanager.filedialog.xml
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "filedialog_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class FiledialogAdaptor
 */

FiledialogAdaptor::FiledialogAdaptor(DBusFileDialogHandle *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

FiledialogAdaptor::~FiledialogAdaptor()
{
    // destructor
}

int FiledialogAdaptor::acceptMode() const
{
    // get the value of property acceptMode
    return qvariant_cast< int >(parent()->property("acceptMode"));
}

void FiledialogAdaptor::setAcceptMode(int value)
{
    // set the value of property acceptMode
    parent()->setProperty("acceptMode", QVariant::fromValue(value));
}

QString FiledialogAdaptor::directory() const
{
    // get the value of property directory
    return qvariant_cast< QString >(parent()->property("directory"));
}

void FiledialogAdaptor::setDirectory(const QString &value)
{
    // set the value of property directory
    parent()->setProperty("directory", QVariant::fromValue(value));
}

QString FiledialogAdaptor::directoryUrl() const
{
    // get the value of property directoryUrl
    return qvariant_cast< QString >(parent()->property("directoryUrl"));
}

void FiledialogAdaptor::setDirectoryUrl(const QString &value)
{
    // set the value of property directoryUrl
    parent()->setProperty("directoryUrl", QVariant::fromValue(value));
}

int FiledialogAdaptor::filter() const
{
    // get the value of property filter
    return qvariant_cast< int >(parent()->property("filter"));
}

void FiledialogAdaptor::setFilter(int value)
{
    // set the value of property filter
    parent()->setProperty("filter", QVariant::fromValue(value));
}

int FiledialogAdaptor::heartbeatInterval() const
{
    // get the value of property heartbeatInterval
    return qvariant_cast< int >(parent()->property("heartbeatInterval"));
}

void FiledialogAdaptor::setHeartbeatInterval(int value)
{
    // set the value of property heartbeatInterval
    parent()->setProperty("heartbeatInterval", QVariant::fromValue(value));
}

bool FiledialogAdaptor::hideOnAccept() const
{
    // get the value of property hideOnAccept
    return qvariant_cast< bool >(parent()->property("hideOnAccept"));
}

void FiledialogAdaptor::setHideOnAccept(bool value)
{
    // set the value of property hideOnAccept
    parent()->setProperty("hideOnAccept", QVariant::fromValue(value));
}

QStringList FiledialogAdaptor::nameFilters() const
{
    // get the value of property nameFilters
    return qvariant_cast< QStringList >(parent()->property("nameFilters"));
}

void FiledialogAdaptor::setNameFilters(const QStringList &value)
{
    // set the value of property nameFilters
    parent()->setProperty("nameFilters", QVariant::fromValue(value));
}

int FiledialogAdaptor::viewMode() const
{
    // get the value of property viewMode
    return qvariant_cast< int >(parent()->property("viewMode"));
}

void FiledialogAdaptor::setViewMode(int value)
{
    // set the value of property viewMode
    parent()->setProperty("viewMode", QVariant::fromValue(value));
}

bool FiledialogAdaptor::windowActive() const
{
    // get the value of property windowActive
    return qvariant_cast< bool >(parent()->property("windowActive"));
}

uint FiledialogAdaptor::windowFlags() const
{
    // get the value of property windowFlags
    return qvariant_cast< uint >(parent()->property("windowFlags"));
}

void FiledialogAdaptor::setWindowFlags(uint value)
{
    // set the value of property windowFlags
    parent()->setProperty("windowFlags", QVariant::fromValue(value));
}

void FiledialogAdaptor::accept()
{
    // handle method call com.deepin.filemanager.filedialog.accept
    parent()->accept();
}

void FiledialogAdaptor::activateWindow()
{
    // handle method call com.deepin.filemanager.filedialog.activateWindow
    parent()->activateWindow();
}

void FiledialogAdaptor::addCustomWidget(int type, const QString &data)
{
    // handle method call com.deepin.filemanager.filedialog.addCustomWidget
    parent()->addCustomWidget(type, data);
}

void FiledialogAdaptor::addDisableUrlScheme(const QString &type)
{
    // handle method call com.deepin.filemanager.filedialog.addDisableUrlScheme
    parent()->addDisableUrlScheme(type);
}

QMap<QString,QVariant> FiledialogAdaptor::allCustomWidgetsValue(int type)
{
    // handle method call com.deepin.filemanager.filedialog.allCustomWidgetsValue
    return parent()->allCustomWidgetsValue(type);
}

void FiledialogAdaptor::beginAddCustomWidget()
{
    // handle method call com.deepin.filemanager.filedialog.beginAddCustomWidget
    parent()->beginAddCustomWidget();
}

void FiledialogAdaptor::deleteLater()
{
    // handle method call com.deepin.filemanager.filedialog.deleteLater
    parent()->deleteLater();
}

void FiledialogAdaptor::endAddCustomWidget()
{
    // handle method call com.deepin.filemanager.filedialog.endAddCustomWidget
    parent()->endAddCustomWidget();
}

QDBusVariant FiledialogAdaptor::getCustomWidgetValue(int type, const QString &text)
{
    // handle method call com.deepin.filemanager.filedialog.getCustomWidgetValue
    return parent()->getCustomWidgetValue(type, text);
}

void FiledialogAdaptor::hide()
{
    // handle method call com.deepin.filemanager.filedialog.hide
    parent()->hide();
}

QString FiledialogAdaptor::labelText(int label)
{
    // handle method call com.deepin.filemanager.filedialog.labelText
    return parent()->labelText(label);
}

void FiledialogAdaptor::makeHeartbeat()
{
    // handle method call com.deepin.filemanager.filedialog.makeHeartbeat
    parent()->makeHeartbeat();
}

void FiledialogAdaptor::open()
{
    // handle method call com.deepin.filemanager.filedialog.open
    parent()->open();
}

int FiledialogAdaptor::options()
{
    // handle method call com.deepin.filemanager.filedialog.options
    return parent()->options();
}

void FiledialogAdaptor::reject()
{
    // handle method call com.deepin.filemanager.filedialog.reject
    parent()->reject();
}

void FiledialogAdaptor::selectFile(const QString &filename)
{
    // handle method call com.deepin.filemanager.filedialog.selectFile
    parent()->selectFile(filename);
}

void FiledialogAdaptor::selectNameFilter(const QString &filter)
{
    // handle method call com.deepin.filemanager.filedialog.selectNameFilter
    parent()->selectNameFilter(filter);
}

void FiledialogAdaptor::selectNameFilterByIndex(int index)
{
    // handle method call com.deepin.filemanager.filedialog.selectNameFilterByIndex
    parent()->selectNameFilterByIndex(index);
}

void FiledialogAdaptor::selectUrl(const QString &url)
{
    // handle method call com.deepin.filemanager.filedialog.selectUrl
    parent()->selectUrl(url);
}

QStringList FiledialogAdaptor::selectedFiles()
{
    // handle method call com.deepin.filemanager.filedialog.selectedFiles
    return parent()->selectedFiles();
}

QString FiledialogAdaptor::selectedNameFilter()
{
    // handle method call com.deepin.filemanager.filedialog.selectedNameFilter
    return parent()->selectedNameFilter();
}

int FiledialogAdaptor::selectedNameFilterIndex()
{
    // handle method call com.deepin.filemanager.filedialog.selectedNameFilterIndex
    return parent()->selectedNameFilterIndex();
}

QStringList FiledialogAdaptor::selectedUrls()
{
    // handle method call com.deepin.filemanager.filedialog.selectedUrls
    return parent()->selectedUrls();
}

void FiledialogAdaptor::setAllowMixedSelection(bool on)
{
    // handle method call com.deepin.filemanager.filedialog.setAllowMixedSelection
    parent()->setAllowMixedSelection(on);
}

void FiledialogAdaptor::setCurrentInputName(const QString &name)
{
    // handle method call com.deepin.filemanager.filedialog.setCurrentInputName
    parent()->setCurrentInputName(name);
}

void FiledialogAdaptor::setFileMode(int fileMode)
{
    // handle method call com.deepin.filemanager.filedialog.setFileMode
    parent()->setFileMode(fileMode);
}

void FiledialogAdaptor::setLabelText(int label, const QString &text)
{
    // handle method call com.deepin.filemanager.filedialog.setLabelText
    parent()->setLabelText(label, text);
}

void FiledialogAdaptor::setOption(int option, bool on)
{
    // handle method call com.deepin.filemanager.filedialog.setOption
    parent()->setOption(option, on);
}

void FiledialogAdaptor::setOptions(int options)
{
    // handle method call com.deepin.filemanager.filedialog.setOptions
    parent()->setOptions(options);
}

void FiledialogAdaptor::setWindowTitle(const QString &title)
{
    // handle method call com.deepin.filemanager.filedialog.setWindowTitle
    parent()->setWindowTitle(title);
}

void FiledialogAdaptor::show()
{
    // handle method call com.deepin.filemanager.filedialog.show
    parent()->show();
}

bool FiledialogAdaptor::testOption(int option)
{
    // handle method call com.deepin.filemanager.filedialog.testOption
    return parent()->testOption(option);
}

qulonglong FiledialogAdaptor::winId()
{
    // handle method call com.deepin.filemanager.filedialog.winId
    return parent()->winId();
}

