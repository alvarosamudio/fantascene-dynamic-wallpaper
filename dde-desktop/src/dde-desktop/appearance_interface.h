/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p appearance_interface.h: ../dde-wallpaper-chooser/dbus/com.deepin.daemon.Appearance.xml
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef APPEARANCE_INTERFACE_H
#define APPEARANCE_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.daemon.Appearance
 */
class ComDeepinDaemonAppearanceInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.Appearance"; }

public:
    ComDeepinDaemonAppearanceInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~ComDeepinDaemonAppearanceInterface();

    Q_PROPERTY(QString Background READ background)
    inline QString background() const
    { return qvariant_cast< QString >(property("Background")); }

    Q_PROPERTY(QString CursorTheme READ cursorTheme)
    inline QString cursorTheme() const
    { return qvariant_cast< QString >(property("CursorTheme")); }

    Q_PROPERTY(double FontSize READ fontSize WRITE setFontSize)
    inline double fontSize() const
    { return qvariant_cast< double >(property("FontSize")); }
    inline void setFontSize(double value)
    { setProperty("FontSize", QVariant::fromValue(value)); }

    Q_PROPERTY(QString GtkTheme READ gtkTheme)
    inline QString gtkTheme() const
    { return qvariant_cast< QString >(property("GtkTheme")); }

    Q_PROPERTY(QString IconTheme READ iconTheme)
    inline QString iconTheme() const
    { return qvariant_cast< QString >(property("IconTheme")); }

    Q_PROPERTY(QString MonospaceFont READ monospaceFont)
    inline QString monospaceFont() const
    { return qvariant_cast< QString >(property("MonospaceFont")); }

    Q_PROPERTY(double Opacity READ opacity WRITE setOpacity)
    inline double opacity() const
    { return qvariant_cast< double >(property("Opacity")); }
    inline void setOpacity(double value)
    { setProperty("Opacity", QVariant::fromValue(value)); }

    Q_PROPERTY(QString StandardFont READ standardFont)
    inline QString standardFont() const
    { return qvariant_cast< QString >(property("StandardFont")); }

    Q_PROPERTY(QString WallpaperSlideShow READ wallpaperSlideShow WRITE setWallpaperSlideShow)
    inline QString wallpaperSlideShow() const
    { return qvariant_cast< QString >(property("WallpaperSlideShow")); }
    inline void setWallpaperSlideShow(const QString &value)
    { setProperty("WallpaperSlideShow", QVariant::fromValue(value)); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Delete(const QString &type, const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type) << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("Delete"), argumentList);
    }

    inline QDBusPendingReply<double> GetScaleFactor()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetScaleFactor"), argumentList);
    }

    inline QDBusPendingReply<QString> GetWallpaperSlideShow(const QString &MonitorName)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(MonitorName);
        return asyncCallWithArgumentList(QStringLiteral("GetWallpaperSlideShow"), argumentList);
    }

    inline QDBusPendingReply<QString> List(const QString &type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type);
        return asyncCallWithArgumentList(QStringLiteral("List"), argumentList);
    }

    inline QDBusPendingReply<> Reset()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Reset"), argumentList);
    }

    inline QDBusPendingReply<> Set(const QString &type, const QString &value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QStringLiteral("Set"), argumentList);
    }

    inline QDBusPendingReply<> SetMonitorBackground(const QString &monitorName, const QString &imageFile)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(monitorName) << QVariant::fromValue(imageFile);
        return asyncCallWithArgumentList(QStringLiteral("SetMonitorBackground"), argumentList);
    }

    inline QDBusPendingReply<> SetScaleFactor(double scale_factor)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(scale_factor);
        return asyncCallWithArgumentList(QStringLiteral("SetScaleFactor"), argumentList);
    }

    inline QDBusPendingReply<> SetWallpaperSlideShow(const QString &MonitorName, const QString &WallpaperSlideShow)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(MonitorName) << QVariant::fromValue(WallpaperSlideShow);
        return asyncCallWithArgumentList(QStringLiteral("SetWallpaperSlideShow"), argumentList);
    }

    inline QDBusPendingReply<QString> Show(const QString &type, const QStringList &names)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type) << QVariant::fromValue(names);
        return asyncCallWithArgumentList(QStringLiteral("Show"), argumentList);
    }

    inline QDBusPendingReply<QString> Thumbnail(const QString &type, const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type) << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("Thumbnail"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void Changed(const QString &type0, const QString &value);
    void Refreshed(const QString &type0);
};

namespace com {
  namespace deepin {
    namespace daemon {
      typedef ::ComDeepinDaemonAppearanceInterface Appearance;
    }
  }
}
#endif
